#!/bin/bash
# 05-nfs-setup.sh
# NFS server configuration for serving ISO files in PXE setup

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Source configuration if it exists
if [[ -f "$SCRIPT_DIR/config.sh" ]]; then
    source "$SCRIPT_DIR/config.sh"
else
    echo -e "${RED}Error: config.sh not found.${NC}"
    echo "Please copy config.sh.example to config.sh and configure your settings:"
    echo "  cp $SCRIPT_DIR/config.sh.example $SCRIPT_DIR/config.sh"
    echo "  nano $SCRIPT_DIR/config.sh"
    echo
    echo "Required network settings must be configured before setting up NFS."
    exit 1
fi

# Validate required network configuration
required_vars=("NETWORK_INTERFACE" "PXE_SERVER_IP" "SUBNET" "NETMASK")
missing_vars=()

for var in "${required_vars[@]}"; do
    if [[ -z "${!var}" ]]; then
        missing_vars+=("$var")
    fi
done

if [[ ${#missing_vars[@]} -gt 0 ]]; then
    echo -e "${RED}Error: Missing required configuration variables in config.sh:${NC}"
    for var in "${missing_vars[@]}"; do
        echo "  - $var"
    done
    echo
    echo "Please edit $SCRIPT_DIR/config.sh and set all required variables."
    exit 1
fi

echo "=== NFS Server Configuration ==="

# Function to check if running as root
check_root() {
    if [[ $EUID -ne 0 ]]; then
        echo -e "${RED}Error: This script must be run as root or with sudo${NC}"
        exit 1
    fi
}

# Function to backup existing NFS configuration
backup_nfs_config() {
    echo -n "Backing up existing NFS configuration... "
    local backup_dir="/root/pxe-backups/$(date +%Y%m%d_%H%M%S)"
    mkdir -p "$backup_dir"
    
    if [[ -f /etc/exports ]]; then
        cp /etc/exports "$backup_dir/"
    fi
    
    if [[ -f /etc/default/nfs-kernel-server ]]; then
        cp /etc/default/nfs-kernel-server "$backup_dir/"
    fi
    
    echo -e "${GREEN}OK${NC}"
    echo "  Backup location: $backup_dir"
}

# Function to create NFS directory structure
create_nfs_directories() {
    echo -e "${BLUE}Creating NFS directory structure...${NC}"
    
    # Create base NFS directory
    echo -n "Creating NFS root directory ($NFS_ROOT)... "
    mkdir -p "$NFS_ROOT"
    echo -e "${GREEN}OK${NC}"
    
    # Create subdirectories for different purposes
    echo -n "Creating ISO mount points... "
    mkdir -p "$NFS_ROOT/iso"
    mkdir -p "$NFS_ROOT/kickstart"
    mkdir -p "$NFS_ROOT/preseed"
    mkdir -p "$NFS_ROOT/scripts"
    echo -e "${GREEN}OK${NC}"
    
    # Set proper permissions
    echo -n "Setting NFS directory permissions... "
    chmod 755 "$NFS_ROOT"
    chmod 755 "$NFS_ROOT"/{iso,kickstart,preseed,scripts}
    echo -e "${GREEN}OK${NC}"
}

# Function to configure NFS exports
configure_nfs_exports() {
    echo -e "${BLUE}Configuring NFS exports...${NC}"
    
    # Calculate network address for export
    local network_addr=$(python3 -c "
import ipaddress
network = ipaddress.IPv4Network('$PXE_SERVER_IP/$NETMASK', strict=False)
print(f'{network.network_address}/{network.prefixlen}')
")
    
    echo -n "Creating NFS exports configuration... "
    
    # Backup original exports file
    if [[ -f /etc/exports ]]; then
        cp /etc/exports /etc/exports.backup.$(date +%Y%m%d_%H%M%S)
    fi
    
    # Create new exports configuration
    cat > /etc/exports << EOF
# NFS exports for PXE server
# Generated by PXE Server Setup Script

# NFS root - read-only access for PXE clients
$NFS_ROOT $network_addr(ro,sync,no_subtree_check,no_root_squash)

# ISO directory - read-only access for installation media
$NFS_ROOT/iso $network_addr(ro,sync,no_subtree_check,no_root_squash)

# Kickstart/Preseed directory - read-only access for automated installs
$NFS_ROOT/kickstart $network_addr(ro,sync,no_subtree_check,no_root_squash)
$NFS_ROOT/preseed $network_addr(ro,sync,no_subtree_check,no_root_squash)

# Scripts directory - read-only access for post-install scripts
$NFS_ROOT/scripts $network_addr(ro,sync,no_subtree_check,no_root_squash)
EOF
    
    echo -e "${GREEN}OK${NC}"
    echo "  Network: $network_addr"
    echo "  Exports: $NFS_ROOT and subdirectories"
}

# Function to configure NFS server settings
configure_nfs_server() {
    echo -e "${BLUE}Configuring NFS server settings...${NC}"
    
    # Configure NFS server options
    echo -n "Updating NFS server configuration... "
    
    # Backup original configuration
    if [[ -f /etc/default/nfs-kernel-server ]]; then
        cp /etc/default/nfs-kernel-server /etc/default/nfs-kernel-server.backup.$(date +%Y%m%d_%H%M%S)
    fi
    
    # Create optimized NFS server configuration
    cat > /etc/default/nfs-kernel-server << EOF
# Defaults for nfs-kernel-server
# Generated by PXE Server Setup Script

# Number of servers to start up
RPCNFSDCOUNT=8

# Runtime priority of server (see nice(1))
RPCNFSDPRIORITY=0

# Options for rpc.mountd
RPCMOUNTDOPTS="--manage-gids"

# Do you want to start the svcgssd daemon? It is only required for Kerberos
# exports. Valid alternatives are "yes" and "no"; the default is "no".
NEED_SVCGSSD="no"

# Options for rpc.svcgssd
RPCSVCGSSDOPTS=""

# Additional options for NFS daemon
RPCNFSDOPTS="--no-udp"
EOF
    
    echo -e "${GREEN}OK${NC}"
}

# Function to start and enable NFS services
start_nfs_services() {
    echo -e "${BLUE}Starting NFS services...${NC}"
    
    # Stop services first
    echo -n "Stopping NFS services... "
    systemctl stop nfs-kernel-server 2>/dev/null || true
    systemctl stop rpcbind 2>/dev/null || true
    echo -e "${GREEN}OK${NC}"
    
    # Enable services
    echo -n "Enabling NFS services... "
    systemctl enable rpcbind
    systemctl enable nfs-kernel-server
    echo -e "${GREEN}OK${NC}"
    
    # Start rpcbind first
    echo -n "Starting rpcbind service... "
    systemctl start rpcbind
    echo -e "${GREEN}OK${NC}"
    
    # Export NFS shares
    echo -n "Exporting NFS shares... "
    exportfs -ra
    echo -e "${GREEN}OK${NC}"
    
    # Start NFS server
    echo -n "Starting NFS kernel server... "
    systemctl start nfs-kernel-server
    echo -e "${GREEN}OK${NC}"
}

# Function to verify NFS services
verify_nfs_services() {
    echo -e "${BLUE}Verifying NFS services...${NC}"
    
    # Check rpcbind service
    echo -n "Checking rpcbind service... "
    if systemctl is-active rpcbind >/dev/null 2>&1; then
        echo -e "${GREEN}Active${NC}"
    else
        echo -e "${RED}Inactive${NC}"
        echo "Error: rpcbind service is not running"
        exit 1
    fi
    
    # Check NFS kernel server
    echo -n "Checking NFS kernel server... "
    if systemctl is-active nfs-kernel-server >/dev/null 2>&1; then
        echo -e "${GREEN}Active${NC}"
    else
        echo -e "${RED}Inactive${NC}"
        echo "Error: NFS kernel server is not running"
        exit 1
    fi
    
    # Check NFS ports
    echo -n "Checking NFS ports... "
    if ss -tulpn 2>/dev/null | grep -q ":2049"; then
        echo -e "${GREEN}Listening${NC}"
    else
        echo -e "${RED}Not listening${NC}"
        echo "Warning: NFS port 2049 may not be accessible"
    fi
    
    # Check exports
    echo -n "Checking NFS exports... "
    local export_count=$(exportfs -v | grep -c "$NFS_ROOT" || echo "0")
    if [[ "$export_count" -gt 0 ]]; then
        echo -e "${GREEN}$export_count exports active${NC}"
    else
        echo -e "${RED}No exports found${NC}"
        echo "Error: NFS exports are not configured properly"
        exit 1
    fi
    
    # Test NFS mount locally
    echo -n "Testing local NFS mount... "
    local test_mount="/tmp/nfs_test_$$"
    mkdir -p "$test_mount"
    
    if timeout 10 mount -t nfs $PXE_SERVER_IP:$NFS_ROOT "$test_mount" 2>/dev/null; then
        echo -e "${GREEN}Success${NC}"
        umount "$test_mount" 2>/dev/null || true
        rmdir "$test_mount" 2>/dev/null || true
    else
        echo -e "${YELLOW}Failed (may need firewall configuration)${NC}"
        rmdir "$test_mount" 2>/dev/null || true
    fi
}

# Function to create a simple test ISO mount
create_test_iso_mount() {
    echo -e "${BLUE}Creating simple test ISO mount point...${NC}"
    
    # Create a simple test directory structure
    local test_iso_dir="$NFS_ROOT/iso/test-pxe"
    echo -n "Creating test ISO mount point... "
    mkdir -p "$test_iso_dir"
    
    # Create a simple test file structure that mimics an ISO
    cat > "$test_iso_dir/README.txt" << EOF
PXE Test ISO Mount Point
========================

This is a test mount point for validating PXE/NFS functionality.

Created: $(date)
Server: $PXE_SERVER_IP
Network: $SUBNET/$NETMASK

To mount this via NFS from a client:
  mount -t nfs $PXE_SERVER_IP:$NFS_ROOT/iso/test-pxe /mnt

This directory will be replaced with actual ISO mounts when ISOs are added.
EOF
    
    # Create a simple boot test structure
    mkdir -p "$test_iso_dir/boot"
    echo "# PXE Boot Test File" > "$test_iso_dir/boot/test.cfg"
    
    chmod -R 755 "$test_iso_dir"
    echo -e "${GREEN}OK${NC}"
    echo "  Test mount: $test_iso_dir"
}

# Function to show firewall configuration help
show_firewall_help() {
    echo -e "${BLUE}Firewall Configuration for NFS:${NC}"
    echo
    echo "NFS requires several ports to be open:"
    echo "  sudo ufw allow 2049/tcp comment 'NFS'"
    echo "  sudo ufw allow 2049/udp comment 'NFS'"
    echo "  sudo ufw allow 111/tcp comment 'RPC portmapper'"
    echo "  sudo ufw allow 111/udp comment 'RPC portmapper'"
    echo "  sudo ufw reload"
    echo
    echo "For fixed RPC ports (recommended for firewalls):"
    echo "  Add to /etc/default/nfs-kernel-server:"
    echo "    STATDOPTS=\"--port 32765 --outgoing-port 32766\""
    echo "    LOCKDOPTS=\"--port 32767\""
    echo "  Then allow these ports in firewall"
    echo
}

# Function to show NFS testing commands
show_testing_commands() {
    echo -e "${BLUE}NFS Testing Commands:${NC}"
    echo
    echo "1. Check NFS exports:"
    echo "   showmount -e localhost"
    echo "   showmount -e $PXE_SERVER_IP"
    echo
    echo "2. List active exports:"
    echo "   exportfs -v"
    echo
    echo "3. Test mount from another machine:"
    echo "   mkdir /tmp/nfs_test"
    echo "   mount -t nfs $PXE_SERVER_IP:$NFS_ROOT/iso /tmp/nfs_test"
    echo "   ls -la /tmp/nfs_test"
    echo "   umount /tmp/nfs_test"
    echo
    echo "4. Monitor NFS activity:"
    echo "   sudo journalctl -u nfs-kernel-server -f"
    echo "   nfsstat -s"
    echo
}

# Function to show configuration summary
show_summary() {
    echo
    echo -e "${GREEN}=== NFS Configuration Summary ===${NC}"
    echo "NFS Root: $NFS_ROOT"
    echo "Network: $(python3 -c "import ipaddress; network = ipaddress.IPv4Network('$PXE_SERVER_IP/$NETMASK', strict=False); print(f'{network.network_address}/{network.prefixlen}')")"
    echo "Server IP: $PXE_SERVER_IP"
    echo
    echo "Services:"
    echo "  rpcbind: $(systemctl is-active rpcbind 2>/dev/null || echo 'inactive')"
    echo "  nfs-kernel-server: $(systemctl is-active nfs-kernel-server 2>/dev/null || echo 'inactive')"
    echo
    echo "Exported directories:"
    exportfs -v | grep "$NFS_ROOT" || echo "  No exports found"
    echo
    echo "Directory structure:"
    echo "  $NFS_ROOT/"
    echo "  ├── iso/          (for mounted ISO files)"
    echo "  ├── kickstart/    (for automated install configs)"
    echo "  ├── preseed/      (for Debian/Ubuntu preseeds)"
    echo "  └── scripts/      (for post-install scripts)"
    echo
    echo "Next steps:"
    echo "1. Set up HTTP server: sudo ./06-http-setup.sh"
    echo "2. Create PXE menu: sudo ./07-pxe-menu.sh"
    echo "3. Add ISO files: sudo ./08-iso-manager.sh add <iso-file>"
    echo
}

# Main execution
main() {
    echo "Starting NFS server configuration for PXE setup..."
    echo "Date: $(date)"
    echo "User: $(whoami)"
    echo "Host: $(hostname)"
    echo

    check_root
    backup_nfs_config
    create_nfs_directories
    configure_nfs_exports
    configure_nfs_server
    start_nfs_services
    verify_nfs_services
    create_test_iso_mount
    
    show_summary
    
    # Check if firewall is active and show help
    if command -v ufw >/dev/null 2>&1 && ufw status | grep -q "Status: active"; then
        show_firewall_help
    fi
    
    show_testing_commands
}

# Run main function
main "$@"
