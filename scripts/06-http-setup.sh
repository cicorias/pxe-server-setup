#!/bin/bash
# 06-http-setup.sh
# HTTP server configuration for PXE server setup using nginx

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Source configuration if it exists
if [[ -f "$SCRIPT_DIR/config.sh" ]]; then
    source "$SCRIPT_DIR/config.sh"
else
    echo -e "${RED}Error: config.sh not found.${NC}"
    echo "Please copy config.sh.example to config.sh and configure your settings:"
    echo "  cp $SCRIPT_DIR/config.sh.example $SCRIPT_DIR/config.sh"
    echo "  nano $SCRIPT_DIR/config.sh"
    echo
    echo "Required network settings must be configured before setting up HTTP server."
    exit 1
fi

# Validate required network configuration
required_vars=("NETWORK_INTERFACE" "PXE_SERVER_IP" "HTTP_ROOT")
missing_vars=()

for var in "${required_vars[@]}"; do
    if [[ -z "${!var}" ]]; then
        missing_vars+=("$var")
    fi
done

if [[ ${#missing_vars[@]} -gt 0 ]]; then
    echo -e "${RED}Error: Missing required configuration variables in config.sh:${NC}"
    for var in "${missing_vars[@]}"; do
        echo "  - $var"
    done
    echo
    echo "Please edit $SCRIPT_DIR/config.sh and set all required variables."
    exit 1
fi

echo "=== HTTP Server Configuration ==="

# Function to check if running as root
check_root() {
    if [[ $EUID -ne 0 ]]; then
        echo -e "${RED}Error: This script must be run as root or with sudo${NC}"
        exit 1
    fi
}

# Function to backup existing nginx configuration
backup_nginx_config() {
    echo -n "Backing up existing nginx configuration... "
    local backup_dir="/root/pxe-backups/$(date +%Y%m%d_%H%M%S)"
    mkdir -p "$backup_dir"
    
    # Backup nginx configurations
    if [[ -d /etc/nginx ]]; then
        cp -r /etc/nginx "$backup_dir/"
    fi
    
    # Backup default site if it exists
    if [[ -f /etc/nginx/sites-available/default ]]; then
        cp /etc/nginx/sites-available/default "$backup_dir/nginx-default.backup"
    fi
    
    echo -e "${GREEN}OK${NC}"
    echo "  Backup location: $backup_dir"
}

# Function to create HTTP directory structure
create_http_directories() {
    echo -e "${BLUE}Creating HTTP directory structure...${NC}"
    
    # Create base HTTP directory
    echo -n "Creating HTTP root directory ($HTTP_ROOT)... "
    mkdir -p "$HTTP_ROOT"
    echo -e "${GREEN}OK${NC}"
    
    # Create subdirectories for different purposes
    echo -n "Creating HTTP subdirectories... "
    mkdir -p "$HTTP_ROOT/iso"
    mkdir -p "$HTTP_ROOT/kickstart"
    mkdir -p "$HTTP_ROOT/preseed"
    mkdir -p "$HTTP_ROOT/scripts"
    mkdir -p "$HTTP_ROOT/firmware"
    mkdir -p "$HTTP_ROOT/drivers"
    mkdir -p "$HTTP_ROOT/tools"
    echo -e "${GREEN}OK${NC}"
    
    # Set proper permissions
    echo -n "Setting HTTP directory permissions... "
    chmod 755 "$HTTP_ROOT"
    chmod -R 755 "$HTTP_ROOT"/{iso,kickstart,preseed,scripts,firmware,drivers,tools}
    chown -R www-data:www-data "$HTTP_ROOT"
    echo -e "${GREEN}OK${NC}"
}

# Function to configure nginx virtual host for PXE
configure_nginx_pxe_site() {
    echo -e "${BLUE}Configuring nginx PXE virtual host...${NC}"
    
    echo -n "Creating PXE site configuration... "
    
    # Create nginx site configuration for PXE
    cat > /etc/nginx/sites-available/pxe << EOF
# PXE Server HTTP Configuration
# Generated by PXE Server Setup Script

server {
    listen 80;
    listen [::]:80;
    
    # Server configuration
    server_name $PXE_SERVER_IP pxeserver;
    root $HTTP_ROOT;
    index index.html index.htm;
    
    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    
    # Logging
    access_log /var/log/nginx/pxe-access.log;
    error_log /var/log/nginx/pxe-error.log;
    
    # Main location - serve files with directory listing
    location / {
        try_files \$uri \$uri/ =404;
        
        # Enable directory browsing
        autoindex on;
        autoindex_exact_size off;
        autoindex_localtime on;
        autoindex_format html;
        
        # Security - prevent access to hidden files
        location ~ /\. {
            deny all;
        }
    }
    
    # ISO files - serve with proper headers
    location /iso/ {
        autoindex on;
        autoindex_exact_size on;
        autoindex_localtime on;
        
        # Large file optimization
        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        
        # Cache headers for ISO files
        expires 1d;
        add_header Cache-Control "public, immutable";
    }
    
    # Kickstart files
    location /kickstart/ {
        autoindex on;
        autoindex_exact_size off;
        autoindex_localtime on;
        
        # Set proper content type for kickstart files
        location ~* \.(cfg|ks)\$ {
            add_header Content-Type text/plain;
        }
    }
    
    # Preseed files  
    location /preseed/ {
        autoindex on;
        autoindex_exact_size off;
        autoindex_localtime on;
        
        # Set proper content type for preseed files
        location ~* \.(cfg|preseed)\$ {
            add_header Content-Type text/plain;
        }
    }
    
    # Scripts directory
    location /scripts/ {
        autoindex on;
        autoindex_exact_size off;
        autoindex_localtime on;
        
        # Set proper content type for script files
        location ~* \.(sh|py|pl|rb)\$ {
            add_header Content-Type text/plain;
        }
    }
    
    # Firmware and drivers
    location /firmware/ {
        autoindex on;
        autoindex_exact_size on;
        autoindex_localtime on;
    }
    
    location /drivers/ {
        autoindex on;
        autoindex_exact_size on;
        autoindex_localtime on;
    }
    
    # Tools directory
    location /tools/ {
        autoindex on;
        autoindex_exact_size on;
        autoindex_localtime on;
    }
    
    # Health check endpoint
    location /health {
        access_log off;
        return 200 "PXE Server HTTP OK\\n";
        add_header Content-Type text/plain;
    }
    
    # Status page
    location /status {
        autoindex off;
        try_files /status.html =404;
    }
    
    # Optimize file serving
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    
    # File upload size limit (for potential web management)
    client_max_body_size 4G;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/xml+rss
        application/json;
}
EOF
    
    echo -e "${GREEN}OK${NC}"
}

# Function to create default HTML pages
create_default_pages() {
    echo -e "${BLUE}Creating default HTML pages...${NC}"
    
    # Create main index page
    echo -n "Creating main index page... "
    cat > "$HTTP_ROOT/index.html" << EOF
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PXE Server - Installation Media</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; background-color: #f5f5f5; }
        .container { max-width: 1200px; margin: 0 auto; background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        h1 { color: #333; border-bottom: 3px solid #007acc; padding-bottom: 10px; }
        h2 { color: #666; margin-top: 30px; }
        .directory { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin: 20px 0; }
        .dir-card { background: #f8f9fa; border: 1px solid #dee2e6; border-radius: 5px; padding: 15px; }
        .dir-card h3 { margin-top: 0; color: #007acc; }
        .dir-card a { color: #007acc; text-decoration: none; font-weight: bold; }
        .dir-card a:hover { text-decoration: underline; }
        .info { background: #e7f3ff; border-left: 4px solid #007acc; padding: 15px; margin: 20px 0; }
        .status { background: #d4edda; border: 1px solid #c3e6cb; border-radius: 5px; padding: 10px; margin: 10px 0; }
        .footer { margin-top: 40px; text-align: center; color: #666; font-size: 0.9em; }
    </style>
</head>
<body>
    <div class="container">
        <h1>üñ•Ô∏è PXE Server - Network Installation</h1>
        
        <div class="info">
            <strong>Server Information:</strong><br>
            IP Address: $PXE_SERVER_IP<br>
            Generated: $(date)<br>
            HTTP Root: $HTTP_ROOT
        </div>
        
        <div class="status">
            <strong>‚úÖ HTTP Server Active</strong> - Ready to serve installation files
        </div>
        
        <h2>üìÅ Available Resources</h2>
        
        <div class="directory">
            <div class="dir-card">
                <h3>üíø ISO Images</h3>
                <p>Operating system installation images</p>
                <a href="/iso/">Browse ISO Files ‚Üí</a>
            </div>
            
            <div class="dir-card">
                <h3>‚öôÔ∏è Kickstart Configs</h3>
                <p>Red Hat/CentOS automated installation configurations</p>
                <a href="/kickstart/">Browse Kickstart Files ‚Üí</a>
            </div>
            
            <div class="dir-card">
                <h3>üìã Preseed Configs</h3>
                <p>Debian/Ubuntu automated installation configurations</p>
                <a href="/preseed/">Browse Preseed Files ‚Üí</a>
            </div>
            
            <div class="dir-card">
                <h3>üìú Scripts</h3>
                <p>Post-installation and automation scripts</p>
                <a href="/scripts/">Browse Scripts ‚Üí</a>
            </div>
            
            <div class="dir-card">
                <h3>üîß Firmware</h3>
                <p>Hardware firmware and drivers</p>
                <a href="/firmware/">Browse Firmware ‚Üí</a>
            </div>
            
            <div class="dir-card">
                <h3>üõ†Ô∏è Tools</h3>
                <p>System utilities and diagnostic tools</p>
                <a href="/tools/">Browse Tools ‚Üí</a>
            </div>
        </div>
        
        <h2>üì° PXE Boot Instructions</h2>
        <div class="info">
            <strong>To boot from this PXE server:</strong><br>
            1. Configure your client machine to boot from network (PXE)<br>
            2. Ensure the client is on the same network (10.1.1.0/24)<br>
            3. Power on the client - it should receive an IP and boot menu<br>
            4. Select your desired installation option from the menu
        </div>
        
        <h2>üîó Quick Links</h2>
        <ul>
            <li><a href="/health">Server Health Check</a></li>
            <li><a href="/status">Server Status</a></li>
        </ul>
        
        <div class="footer">
            PXE Server Setup | Ubuntu 24.04 LTS | Generated by pxe-server-setup
        </div>
    </div>
</body>
</html>
EOF
    echo -e "${GREEN}OK${NC}"
    
    # Create status page
    echo -n "Creating status page... "
    cat > "$HTTP_ROOT/status.html" << EOF
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PXE Server Status</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; background-color: #f5f5f5; }
        .container { max-width: 800px; margin: 0 auto; background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        h1 { color: #333; border-bottom: 3px solid #007acc; padding-bottom: 10px; }
        .service { background: #f8f9fa; border: 1px solid #dee2e6; border-radius: 5px; padding: 15px; margin: 10px 0; }
        .service.active { border-left: 4px solid #28a745; }
        .service.inactive { border-left: 4px solid #dc3545; }
        .back-link { margin-top: 20px; }
        .back-link a { color: #007acc; text-decoration: none; }
        .back-link a:hover { text-decoration: underline; }
    </style>
    <script>
        function updateStatus() {
            // This would be enhanced with actual service status checks via JavaScript
            document.getElementById('timestamp').textContent = new Date().toLocaleString();
        }
        setInterval(updateStatus, 30000); // Update every 30 seconds
    </script>
</head>
<body>
    <div class="container">
        <h1>üñ•Ô∏è PXE Server Status</h1>
        
        <p><strong>Last Updated:</strong> <span id="timestamp">$(date)</span></p>
        
        <div class="service active">
            <h3>HTTP Server (nginx)</h3>
            <p>Status: Active | Port: 80 | Root: $HTTP_ROOT</p>
        </div>
        
        <div class="service active">
            <h3>TFTP Server</h3>
            <p>Status: Active | Port: 69 | Root: /var/lib/tftpboot</p>
        </div>
        
        <div class="service active">
            <h3>DHCP Server</h3>
            <p>Status: Active | Port: 67 | Network: 10.1.1.0/24</p>
        </div>
        
        <div class="service active">
            <h3>NFS Server</h3>
            <p>Status: Active | Port: 2049 | Exports: /srv/nfs</p>
        </div>
        
        <div class="back-link">
            <a href="/">‚Üê Back to Main Page</a>
        </div>
    </div>
    
    <script>updateStatus();</script>
</body>
</html>
EOF
    echo -e "${GREEN}OK${NC}"
}

# Function to enable nginx site and disable default
configure_nginx_sites() {
    echo -e "${BLUE}Configuring nginx sites...${NC}"
    
    # Disable default site
    echo -n "Disabling default nginx site... "
    if [[ -f /etc/nginx/sites-enabled/default ]]; then
        rm -f /etc/nginx/sites-enabled/default
    fi
    echo -e "${GREEN}OK${NC}"
    
    # Enable PXE site
    echo -n "Enabling PXE site... "
    ln -sf /etc/nginx/sites-available/pxe /etc/nginx/sites-enabled/
    echo -e "${GREEN}OK${NC}"
    
    # Test nginx configuration
    echo -n "Testing nginx configuration... "
    if nginx -t 2>/dev/null; then
        echo -e "${GREEN}OK${NC}"
    else
        echo -e "${RED}FAILED${NC}"
        echo "Error: nginx configuration test failed"
        echo "Check with: sudo nginx -t"
        exit 1
    fi
}

# Function to start and enable nginx service
start_nginx_service() {
    echo -e "${BLUE}Starting nginx service...${NC}"
    
    # Stop nginx service
    echo -n "Stopping nginx service... "
    systemctl stop nginx 2>/dev/null || true
    echo -e "${GREEN}OK${NC}"
    
    # Enable nginx service
    echo -n "Enabling nginx service... "
    systemctl enable nginx
    echo -e "${GREEN}OK${NC}"
    
    # Start nginx service
    echo -n "Starting nginx service... "
    if systemctl start nginx; then
        echo -e "${GREEN}OK${NC}"
    else
        echo -e "${RED}FAILED${NC}"
        echo "Error: Failed to start nginx service"
        echo "Check logs with: journalctl -u nginx"
        echo "Check configuration with: nginx -t"
        exit 1
    fi
    
    # Check service status
    echo -n "Checking nginx service status... "
    if systemctl is-active nginx >/dev/null 2>&1; then
        echo -e "${GREEN}Active${NC}"
    else
        echo -e "${RED}Inactive${NC}"
        echo "Service status:"
        systemctl status nginx --no-pager -l
        exit 1
    fi
}

# Function to verify HTTP service
verify_http_service() {
    echo -e "${BLUE}Verifying HTTP service...${NC}"
    
    # Check if HTTP port is listening
    echo -n "Checking HTTP port (80/TCP)... "
    if ss -tlpn 2>/dev/null | grep -q ":80\b"; then
        echo -e "${GREEN}Listening${NC}"
    else
        echo -e "${RED}Not listening${NC}"
        echo "Error: HTTP port 80 is not listening"
        exit 1
    fi
    
    # Test HTTP response
    echo -n "Testing HTTP response... "
    if curl -s -o /dev/null -w "%{http_code}" "http://$PXE_SERVER_IP/" | grep -q "200"; then
        echo -e "${GREEN}Success${NC}"
    else
        echo -e "${RED}Failed${NC}"
        echo "Error: HTTP server not responding correctly"
        echo "Check with: curl -v http://$PXE_SERVER_IP/"
        exit 1
    fi
    
    # Test health endpoint
    echo -n "Testing health endpoint... "
    if curl -s "http://$PXE_SERVER_IP/health" | grep -q "PXE Server HTTP OK"; then
        echo -e "${GREEN}Success${NC}"
    else
        echo -e "${RED}Failed${NC}"
        echo "Warning: Health endpoint not responding correctly"
    fi
    
    # Check directory browsing
    echo -n "Testing directory browsing... "
    if curl -s "http://$PXE_SERVER_IP/iso/" | grep -q "Index of"; then
        echo -e "${GREEN}Success${NC}"
    else
        echo -e "${YELLOW}Warning${NC}"
        echo "Directory browsing may not be working correctly"
    fi
}

# Function to create symbolic links to NFS directories
create_nfs_links() {
    echo -e "${BLUE}Creating links to NFS directories...${NC}"
    
    echo -n "Linking ISO directory... "
    if [[ -d "$NFS_ROOT/iso" ]]; then
        rm -rf "$HTTP_ROOT/iso"
        ln -sf "$NFS_ROOT/iso" "$HTTP_ROOT/iso"
        echo -e "${GREEN}OK${NC}"
    else
        echo -e "${YELLOW}Skipped (NFS not configured)${NC}"
    fi
    
    echo -n "Linking kickstart directory... "
    if [[ -d "$NFS_ROOT/kickstart" ]]; then
        rm -rf "$HTTP_ROOT/kickstart"
        ln -sf "$NFS_ROOT/kickstart" "$HTTP_ROOT/kickstart"
        echo -e "${GREEN}OK${NC}"
    else
        echo -e "${YELLOW}Skipped (NFS not configured)${NC}"
    fi
    
    echo -n "Linking preseed directory... "
    if [[ -d "$NFS_ROOT/preseed" ]]; then
        rm -rf "$HTTP_ROOT/preseed"
        ln -sf "$NFS_ROOT/preseed" "$HTTP_ROOT/preseed"
        echo -e "${GREEN}OK${NC}"
    else
        echo -e "${YELLOW}Skipped (NFS not configured)${NC}"
    fi
    
    echo -n "Linking scripts directory... "
    if [[ -d "$NFS_ROOT/scripts" ]]; then
        rm -rf "$HTTP_ROOT/scripts"
        ln -sf "$NFS_ROOT/scripts" "$HTTP_ROOT/scripts"
        echo -e "${GREEN}OK${NC}"
    else
        echo -e "${YELLOW}Skipped (NFS not configured)${NC}"
    fi
}

# Function to show firewall configuration help
show_firewall_help() {
    echo -e "${BLUE}Firewall Configuration for HTTP:${NC}"
    echo
    echo "HTTP server requires port 80 to be open:"
    echo "  sudo ufw allow 80/tcp comment 'HTTP for PXE'"
    echo "  sudo ufw reload"
    echo
    echo "Optional HTTPS (if configured later):"
    echo "  sudo ufw allow 443/tcp comment 'HTTPS for PXE'"
    echo
}

# Function to show testing commands
show_testing_commands() {
    echo -e "${BLUE}HTTP Server Testing Commands:${NC}"
    echo
    echo "1. Test main page:"
    echo "   curl -I http://$PXE_SERVER_IP/"
    echo "   curl http://$PXE_SERVER_IP/"
    echo
    echo "2. Test health endpoint:"
    echo "   curl http://$PXE_SERVER_IP/health"
    echo
    echo "3. Test directory browsing:"
    echo "   curl http://$PXE_SERVER_IP/iso/"
    echo "   curl http://$PXE_SERVER_IP/kickstart/"
    echo
    echo "4. Test from web browser:"
    echo "   http://$PXE_SERVER_IP/"
    echo
    echo "5. Monitor HTTP access:"
    echo "   sudo tail -f /var/log/nginx/pxe-access.log"
    echo "   sudo tail -f /var/log/nginx/pxe-error.log"
    echo
}

# Function to show configuration summary
show_summary() {
    echo
    echo -e "${GREEN}=== HTTP Server Configuration Summary ===${NC}"
    echo "HTTP Server: nginx"
    echo "Server IP: $PXE_SERVER_IP"
    echo "HTTP Root: $HTTP_ROOT"
    echo "Listen Port: 80"
    echo
    echo "Services:"
    echo "  nginx: $(systemctl is-active nginx 2>/dev/null || echo 'inactive')"
    echo "  Enabled: $(systemctl is-enabled nginx 2>/dev/null || echo 'disabled')"
    echo
    echo "Configuration files:"
    echo "  - /etc/nginx/sites-available/pxe"
    echo "  - /etc/nginx/sites-enabled/pxe"
    echo
    echo "Document structure:"
    echo "  $HTTP_ROOT/"
    echo "  ‚îú‚îÄ‚îÄ index.html        (main page)"
    echo "  ‚îú‚îÄ‚îÄ status.html       (status page)"
    echo "  ‚îú‚îÄ‚îÄ iso/             (‚Üí $NFS_ROOT/iso)"
    echo "  ‚îú‚îÄ‚îÄ kickstart/       (‚Üí $NFS_ROOT/kickstart)"
    echo "  ‚îú‚îÄ‚îÄ preseed/         (‚Üí $NFS_ROOT/preseed)"
    echo "  ‚îú‚îÄ‚îÄ scripts/         (‚Üí $NFS_ROOT/scripts)"
    echo "  ‚îú‚îÄ‚îÄ firmware/        (local firmware files)"
    echo "  ‚îú‚îÄ‚îÄ drivers/         (local driver files)"
    echo "  ‚îî‚îÄ‚îÄ tools/           (local tool files)"
    echo
    echo "Access URLs:"
    echo "  Main page: http://$PXE_SERVER_IP/"
    echo "  Health check: http://$PXE_SERVER_IP/health"
    echo "  Status page: http://$PXE_SERVER_IP/status"
    echo "  ISO files: http://$PXE_SERVER_IP/iso/"
    echo
    echo "Next steps:"
    echo "1. Create PXE menu: sudo ./07-pxe-menu.sh"
    echo "2. Add ISO files: sudo ./08-iso-manager.sh add <iso-file>"
    echo "3. Test PXE boot with a client machine"
    echo
}

# Main execution
main() {
    echo "Starting HTTP server configuration for PXE setup..."
    echo "Date: $(date)"
    echo "User: $(whoami)"
    echo "Host: $(hostname)"
    echo

    check_root
    backup_nginx_config
    create_http_directories
    configure_nginx_pxe_site
    create_default_pages
    configure_nginx_sites
    start_nginx_service
    verify_http_service
    create_nfs_links
    
    show_summary
    
    # Check if firewall is active and show help
    if command -v ufw >/dev/null 2>&1 && ufw status | grep -q "Status: active"; then
        show_firewall_help
    fi
    
    show_testing_commands
}

# Run main function
main "$@"
