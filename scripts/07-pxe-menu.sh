#!/bin/bash
# 07-pxe-menu.sh
# PXE boot menu configuration for PXE server setup

set -euo pipefail
set -x
# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Source configuration if it exists
if [[ -f "$SCRIPT_DIR/config.sh" ]]; then
    source "$SCRIPT_DIR/config.sh"
else
    echo -e "${RED}Error: config.sh not found.${NC}"
    echo "Please copy config.sh.example to config.sh and configure your settings:"
    echo "  cp $SCRIPT_DIR/config.sh.example $SCRIPT_DIR/config.sh"
    echo "  nano $SCRIPT_DIR/config.sh"
    echo
    echo "Required network settings must be configured before setting up PXE menu."
    exit 1
fi

# Validate required network configuration
required_vars=("NETWORK_INTERFACE" "PXE_SERVER_IP" "TFTP_ROOT")
missing_vars=()

for var in "${required_vars[@]}"; do
    if [[ -z "${!var}" ]]; then
        missing_vars+=("$var")
    fi
done

if [[ ${#missing_vars[@]} -gt 0 ]]; then
    echo -e "${RED}Error: Missing required configuration variables in config.sh:${NC}"
    for var in "${missing_vars[@]}"; do
        echo "  - $var"
    done
    echo
    echo "Please edit $SCRIPT_DIR/config.sh and set all required variables."
    exit 1
fi

echo "=== PXE Boot Menu Configuration ==="

# Function to check if running as root
check_root() {
    if [[ $EUID -ne 0 ]]; then
        echo -e "${RED}Error: This script must be run as root or with sudo${NC}"
        exit 1
    fi
}

# Function to backup existing PXE configuration
backup_pxe_config() {
    echo -n "Backing up existing GRUB configuration... "
    local backup_dir="/root/pxe-backups/$(date +%Y%m%d_%H%M%S)"
    mkdir -p "$backup_dir"
    
    # Backup existing GRUB configuration if it exists
    if [[ -d "$TFTP_ROOT/grub" ]]; then
        cp -r "$TFTP_ROOT/grub" "$backup_dir/"
    fi
    
    # Backup any existing grub.cfg files
    if [[ -f "$TFTP_ROOT/grub/grub.cfg" ]]; then
        cp "$TFTP_ROOT/grub/grub.cfg" "$backup_dir/grub.cfg.backup"
    fi
    
    echo -e "${GREEN}OK${NC}"
    echo "  Backup location: $backup_dir"
}

# Function to create GRUB menu directory structure
create_pxe_menu_structure() {
    echo -e "${BLUE}Creating GRUB menu directory structure...${NC}"
    
    # Create grub directory
    echo -n "Creating grub directory... "
    mkdir -p "$TFTP_ROOT/grub"
    chmod 755 "$TFTP_ROOT/grub"
    echo -e "${GREEN}OK${NC}"
    
    # Create menu subdirectories
    echo -n "Creating menu subdirectories... "
    mkdir -p "$TFTP_ROOT/menus"
    mkdir -p "$TFTP_ROOT/images"
    mkdir -p "$TFTP_ROOT/kernels"
    mkdir -p "$TFTP_ROOT/initrd"
    chmod 755 "$TFTP_ROOT"/{menus,images,kernels,initrd}
    echo -e "${GREEN}OK${NC}"
    
    # Set proper ownership
    echo -n "Setting TFTP directory ownership... "
    chown -R tftp:tftp "$TFTP_ROOT"
    echo -e "${GREEN}OK${NC}"
}

# Function to create main GRUB2 boot menu
create_main_pxe_menu() {
    echo -e "${BLUE}Creating main GRUB2 boot menu...${NC}"
    
    echo -n "Creating default GRUB configuration... "
    
    # Create main GRUB configuration
    cat > "$TFTP_ROOT/grub/grub.cfg" << EOF
# GRUB Configuration for UEFI PXE Boot
# Generated by PXE Server Setup Script
# Server: $PXE_SERVER_IP

set timeout=30
set default=0

# Load required modules
insmod net
insmod efinet
insmod tftp
insmod http

# Set network configuration
set net_default_server=$PXE_SERVER_IP

# Set colors
set color_normal=white/black
set color_highlight=black/light-gray

menuentry 'Boot from local disk' --id=local {
    echo 'Attempting to boot from local disk...'
    # Try to boot from local disk
    set root=(hd0)
    if [ -f /EFI/BOOT/BOOTX64.EFI ]; then
        chainloader /EFI/BOOT/BOOTX64.EFI
    elif [ -f /EFI/Microsoft/Boot/bootmgfw.efi ]; then
        chainloader /EFI/Microsoft/Boot/bootmgfw.efi
    else
        chainloader (hd0,gpt1)/EFI/BOOT/BOOTX64.EFI
    fi
    boot
}

menuentry 'Memory Test (EFI)' --id=memtest {
    echo "EFI Memory test would require specific EFI memtest utility"
    echo "Press any key to return to menu..."
    read
}

menuentry 'System Information' --id=sysinfo {
    echo "System Information:"
    echo "Server IP: $PXE_SERVER_IP"
    echo "Generated: $(date +'%Y-%m-%d %H:%M')"
    echo "Press any key to return to menu..."
    read
}

menuentry 'Reboot' --id=reboot {
    echo "Rebooting system..."
    reboot
}

menuentry 'Shutdown' --id=shutdown {
    echo "Shutting down system..."
    halt
}

# ISO entries will be automatically added here by iso-manager.sh
EOF
    
    echo -e "${GREEN}OK${NC}"
}

# Note: Advanced submenu functions removed for UEFI-only operation
    # GRUB2 uses different timeout and menu structure
# All advanced features should be implemented as separate GRUB2 menu entries

# Function to setup UEFI boot requirements (simplified for UEFI-only)
setup_uefi_boot() {
    echo -e "${BLUE}Setting up UEFI boot requirements...${NC}"
    
    # Note: UEFI boot files (bootx64.efi, etc.) are set up by 09-uefi-pxe-setup.sh
    echo -n "Verifying GRUB configuration exists... "
    if [[ -f "$TFTP_ROOT/grub/grub.cfg" ]]; then
        echo -e "${GREEN}OK${NC}"
    else
        echo -e "${YELLOW}Will be created${NC}"
    fi
    
    # Set proper permissions
    echo -n "Setting file permissions... "
    find "$TFTP_ROOT" -name "*.cfg" -exec chmod 644 {} \; 2>/dev/null || true
    chown -R tftp:tftp "$TFTP_ROOT" 2>/dev/null || chown -R nobody:nogroup "$TFTP_ROOT"
    echo -e "${GREEN}OK${NC}"
}

# Function to create ISO placeholder comment in GRUB config
create_iso_placeholders() {
    echo -n "Adding ISO placeholder comment to GRUB config... "
    
    # Add a comment placeholder that iso-manager will use to insert ISOs
    cat >> "$TFTP_ROOT/grub/grub.cfg" << EOF

# ISO entries will be automatically added here by iso-manager.sh
# Format example:
# menuentry 'Ubuntu 24.04 Server' --id=ubuntu-24.04 {
#     echo 'Loading Ubuntu 24.04...'
#     linux /kernels/ubuntu-24.04/vmlinuz ip=dhcp url=http://$PXE_SERVER_IP/iso/ubuntu-24.04/
#     initrd /initrd/ubuntu-24.04/initrd
#     boot
# }
EOF
    
    echo -e "${GREEN}OK${NC}"
}

# Function to verify GRUB menu configuration
verify_pxe_menu() {
    echo -e "${BLUE}Verifying GRUB menu configuration...${NC}"
    
    # Check main GRUB configuration file
    echo -n "Checking main GRUB configuration... "
    if [[ -f "$TFTP_ROOT/grub/grub.cfg" ]]; then
        echo -e "${GREEN}Present${NC}"
    else
        echo -e "${RED}Missing${NC}"
        echo "Error: Main GRUB configuration not found"
        exit 1
    fi
    
    # Check UEFI boot files (will be set up by 09-uefi-pxe-setup.sh)
    echo -n "Checking UEFI boot files... "
    if [[ -f "$TFTP_ROOT/bootx64.efi" ]]; then
        echo -e "${GREEN}Present${NC}"
    else
        echo -e "${YELLOW}Will be created by UEFI setup${NC}"
    fi
    
    # Check TFTP service
    echo -n "Checking TFTP service... "
    if systemctl is-active tftpd-hpa >/dev/null 2>&1; then
        echo -e "${GREEN}Active${NC}"
    else
        echo -e "${RED}Inactive${NC}"
        echo "Warning: TFTP service not running"
    fi
}

# Function to restart TFTP service
restart_tftp_service() {
    echo -e "${BLUE}Restarting TFTP service...${NC}"
    
    echo -n "Restarting TFTP service... "
    if systemctl restart tftpd-hpa; then
        echo -e "${GREEN}OK${NC}"
    else
        echo -e "${RED}Failed${NC}"
        echo "Warning: Failed to restart TFTP service"
        echo "Check with: sudo systemctl status tftpd-hpa"
    fi
    
    # Verify service is running
    echo -n "Verifying TFTP service... "
    if systemctl is-active tftpd-hpa >/dev/null 2>&1; then
        echo -e "${GREEN}Active${NC}"
    else
        echo -e "${RED}Inactive${NC}"
        echo "Error: TFTP service failed to start"
        exit 1
    fi
}

# Function to show testing commands
show_testing_commands() {
    echo -e "${BLUE}GRUB PXE Menu Testing Commands:${NC}"
    echo
    echo "1. Test TFTP access to GRUB files:"
    echo "   tftp $PXE_SERVER_IP -c get grub/grub.cfg"
    echo "   tftp $PXE_SERVER_IP -c get bootx64.efi"
    echo
    echo "2. Check GRUB configuration syntax:"
    echo "   cat $TFTP_ROOT/grub/grub.cfg"
    echo
    echo "3. Test UEFI PXE boot:"
    echo "   - Configure a VM or physical machine for UEFI network boot"
    echo "   - Ensure client is on the same network (10.1.1.0/24)"
    echo "   - Boot from network and verify GRUB menu appears"
    echo
    echo "4. Monitor TFTP requests:"
    echo "   sudo journalctl -u tftpd-hpa -f"
    echo "   sudo tcpdump -i $NETWORK_INTERFACE port 69"
    echo
}

# Function to show configuration summary
show_summary() {
    echo
    echo -e "${GREEN}=== GRUB Menu Configuration Summary (UEFI-only) ===${NC}"
    echo "TFTP Root: $TFTP_ROOT"
    echo "PXE Server: $PXE_SERVER_IP"
    echo "Menu Timeout: 30 seconds"
    echo "Default Action: Boot from local disk"
    echo
    echo "Menu Structure:"
    echo "  Main Menu: $TFTP_ROOT/grub/grub.cfg"
    echo "  Boot Files: $TFTP_ROOT/bootx64.efi (created by UEFI setup)"
    echo
    echo "Boot Options Available:"
    echo "  • Boot from local disk (default)"
    echo "  • Memory test (EFI - if available)"
    echo "  • System information"
    echo "  • Reboot/Shutdown"
    echo
    echo "ISO Integration:"
    echo "  ISOs will be automatically added by: sudo ./08-iso-manager.sh add <iso>"
    echo
    echo "Web Interface:"
    echo "  http://$PXE_SERVER_IP/ - Main server interface"
    echo "  http://$PXE_SERVER_IP/status - Server status"
    echo
    echo "Next steps:"
    echo "1. Set up UEFI boot files: sudo ./09-uefi-pxe-setup.sh"
    echo "2. Add ISO files: sudo ./08-iso-manager.sh add <iso-file>"
    echo "3. Test UEFI PXE boot with a client machine"
    echo "4. Monitor logs: sudo journalctl -u tftpd-hpa -f"
    echo
}

# Main execution
main() {
    echo "Starting GRUB boot menu configuration (UEFI-only)..."
    echo "Date: $(date)"
    echo "User: $(whoami)"
    echo "Host: $(hostname)"
    echo

    check_root
    backup_pxe_config
    create_pxe_menu_structure
    create_main_pxe_menu
    setup_uefi_boot
    create_iso_placeholders
    verify_pxe_menu
    restart_tftp_service
    
    show_summary
    show_testing_commands
}

# Run main function
main "$@"
