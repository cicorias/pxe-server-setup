#!/bin/bash
# 07-pxe-menu.sh
# PXE boot menu configuration for PXE server setup

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Source configuration if it exists
if [[ -f "$SCRIPT_DIR/config.sh" ]]; then
    source "$SCRIPT_DIR/config.sh"
else
    echo -e "${RED}Error: config.sh not found.${NC}"
    echo "Please copy config.sh.example to config.sh and configure your settings:"
    echo "  cp $SCRIPT_DIR/config.sh.example $SCRIPT_DIR/config.sh"
    echo "  nano $SCRIPT_DIR/config.sh"
    echo
    echo "Required network settings must be configured before setting up PXE menu."
    exit 1
fi

# Default paths for extracted files
EXTRACTED_FILES_DIR="${ARTIFACTS_DIR}/extracted-boot-files"
SYSLINUX_FILES_DIR="${EXTRACTED_FILES_DIR}/syslinux"
MEMTEST_FILES_DIR="${EXTRACTED_FILES_DIR}/memtest"

# Validate required network configuration
required_vars=("NETWORK_INTERFACE" "PXE_SERVER_IP" "TFTP_ROOT")
missing_vars=()

for var in "${required_vars[@]}"; do
    if [[ -z "${!var}" ]]; then
        missing_vars+=("$var")
    fi
done

if [[ ${#missing_vars[@]} -gt 0 ]]; then
    echo -e "${RED}Error: Missing required configuration variables in config.sh:${NC}"
    for var in "${missing_vars[@]}"; do
        echo "  - $var"
    done
    echo
    echo "Please edit $SCRIPT_DIR/config.sh and set all required variables."
    exit 1
fi

echo "=== PXE Boot Menu Configuration ==="

# Function to check if running as root
check_root() {
    if [[ $EUID -ne 0 ]]; then
        echo -e "${RED}Error: This script must be run as root or with sudo${NC}"
        exit 1
    fi
}

# Function to copy file from extracted location or fallback to host system
copy_boot_file() {
    local filename="$1"
    local extracted_path="$2"
    local host_path="$3"
    local destination="$4"
    
    if [[ -f "$extracted_path" ]]; then
        echo -n "  Copying $filename from extracted files... "
        if cp "$extracted_path" "$destination"; then
            echo -e "${GREEN}OK${NC}"
            return 0
        else
            echo -e "${RED}Failed${NC}"
        fi
    fi
    
    if [[ -f "$host_path" ]]; then
        echo -n "  Copying $filename from host system... "
        if cp "$host_path" "$destination"; then
            echo -e "${GREEN}OK${NC}"
            return 0
        else
            echo -e "${RED}Failed${NC}"
        fi
    fi
    
    echo -e "${YELLOW}Warning: $filename not found in extracted files or host system${NC}"
    return 1
}

# Function to backup existing PXE configuration
backup_pxe_config() {
    echo -n "Backing up existing PXE configuration... "
    local backup_dir="/root/pxe-backups/$(date +%Y%m%d_%H%M%S)"
    mkdir -p "$backup_dir"
    
    # Backup existing PXE configuration if it exists
    if [[ -d "$TFTP_ROOT/pxelinux.cfg" ]]; then
        cp -r "$TFTP_ROOT/pxelinux.cfg" "$backup_dir/"
    fi
    
    # Backup any existing menu files
    if [[ -f "$TFTP_ROOT/pxelinux.cfg/default" ]]; then
        cp "$TFTP_ROOT/pxelinux.cfg/default" "$backup_dir/pxelinux.default.backup"
    fi
    
    echo -e "${GREEN}OK${NC}"
    echo "  Backup location: $backup_dir"
}

# Function to create PXE menu directory structure
create_pxe_menu_structure() {
    echo -e "${BLUE}Creating PXE menu directory structure...${NC}"
    
    # Create pxelinux.cfg directory
    echo -n "Creating pxelinux.cfg directory... "
    mkdir -p "$TFTP_ROOT/pxelinux.cfg"
    chmod 755 "$TFTP_ROOT/pxelinux.cfg"
    echo -e "${GREEN}OK${NC}"
    
    # Create menu subdirectories
    echo -n "Creating menu subdirectories... "
    mkdir -p "$TFTP_ROOT/menus"
    mkdir -p "$TFTP_ROOT/images"
    mkdir -p "$TFTP_ROOT/kernels"
    mkdir -p "$TFTP_ROOT/initrd"
    chmod 755 "$TFTP_ROOT"/{menus,images,kernels,initrd}
    echo -e "${GREEN}OK${NC}"
    
    # Set proper ownership
    echo -n "Setting TFTP directory ownership... "
    chown -R tftp:tftp "$TFTP_ROOT"
    echo -e "${GREEN}OK${NC}"
}

# Function to create main PXE boot menu
create_main_pxe_menu() {
    echo -e "${BLUE}Creating main PXE boot menu...${NC}"
    
    echo -n "Creating default PXE menu configuration... "
    
    # Create main menu configuration
    cat > "$TFTP_ROOT/pxelinux.cfg/default" << EOF
# PXE Boot Menu Configuration
# Generated by PXE Server Setup Script
# Server: $PXE_SERVER_IP

DEFAULT menu.c32
PROMPT 0
TIMEOUT ${PXELINUX_TIMEOUT}0
ONTIMEOUT local

# Menu appearance
MENU TITLE PXE Boot Menu - Network Installation Server
MENU BACKGROUND
MENU COLOR border       30;44   #40ffffff #a0000000 std
MENU COLOR title        1;36;44 #9033ccff #a0000000 std
MENU COLOR sel          7;37;40 #e0ffffff #20ffffff all
MENU COLOR unsel        37;44   #50ffffff #a0000000 std
MENU COLOR help         37;40   #c0ffffff #a0000000 std
MENU COLOR timeout_msg  37;40   #80ffffff #00000000 std
MENU COLOR timeout      1;37;40 #c0ffffff #00000000 std
MENU COLOR msg07        37;40   #90ffffff #a0000000 std
MENU COLOR tabmsg       31;40   #30ffffff #00000000 std

# Menu header information
MENU MSGCOLOR #7f #00000000 #80ffffff
MENU COMBOOT
MENU HEADER
    ╔═══════════════════════════════════════════════════════════╗
    ║              Network Boot Installation Server              ║
    ║                    IP: $PXE_SERVER_IP                    ║
    ║              Generated: $(date +'%Y-%m-%d %H:%M')              ║
    ╚═══════════════════════════════════════════════════════════╝
    
    Select an installation option or boot from local disk.
    
    Use arrow keys to navigate, Enter to select.
    Menu will auto-boot to local disk in ${PXELINUX_TIMEOUT} seconds.

# Boot options

LABEL local
    MENU LABEL ^1) Boot from local disk
    MENU DEFAULT
    LOCALBOOT 0x80
    TEXT HELP
    Boot from the local hard disk. This is the default option.
    The system will attempt to boot from the first bootable device.
    ENDTEXT

LABEL bootlocal
    MENU LABEL ^2) Boot from local disk (alternative)
    LOCALBOOT 0
    TEXT HELP
    Alternative local boot method. Try this if option 1 doesn't work.
    ENDTEXT

LABEL memtest86
    MENU LABEL ^3) Memory Test (Memtest86+)
    KERNEL memtest86+
    TEXT HELP
    Run comprehensive memory diagnostic test.
    This will test your system's RAM for errors.
    ENDTEXT

LABEL memtest86-iso
    MENU LABEL ^4) Memory Test (ISO)
    KERNEL memdisk
    APPEND iso raw
    INITRD memtest86+.iso
    TEXT HELP
    Run memory test from ISO image.
    Alternative memory testing option.
    ENDTEXT

LABEL hardware-info
    MENU LABEL ^5) System Information (HDT)
    KERNEL hdt.c32
    TEXT HELP
    Hardware Detection Tool - Display detailed system information.
    Shows CPU, memory, PCI devices, and other hardware details.
    ENDTEXT

LABEL menu-separator-1
    MENU LABEL
    MENU DISABLE

LABEL menu-header-os
    MENU LABEL --- Operating System Installation ---
    MENU DISABLE

# Ubuntu installations will be added here automatically
# by the ISO manager script

LABEL menu-separator-2
    MENU LABEL
    MENU DISABLE

LABEL menu-header-tools
    MENU LABEL --- Network and Recovery Tools ---
    MENU DISABLE

LABEL network-tools
    MENU LABEL ^N) Network Tools Menu
    KERNEL menu.c32
    APPEND /menus/network-tools.cfg
    TEXT HELP
    Access network diagnostic and configuration tools.
    Includes network testing and configuration utilities.
    ENDTEXT

LABEL recovery-tools
    MENU LABEL ^R) Recovery Tools Menu
    KERNEL menu.c32
    APPEND /menus/recovery-tools.cfg
    TEXT HELP
    Access system recovery and rescue tools.
    Includes disk utilities and system repair tools.
    ENDTEXT

LABEL utility-tools
    MENU LABEL ^U) Utility Tools Menu
    KERNEL menu.c32
    APPEND /menus/utility-tools.cfg
    TEXT HELP
    Access general system utilities and diagnostic tools.
    ENDTEXT

LABEL menu-separator-3
    MENU LABEL
    MENU DISABLE

LABEL menu-header-info
    MENU LABEL --- Information and Help ---
    MENU DISABLE

LABEL server-info
    MENU LABEL ^I) Server Information
    KERNEL menu.c32
    APPEND /menus/server-info.cfg
    TEXT HELP
    Display information about this PXE server and available services.
    ENDTEXT

LABEL reboot
    MENU LABEL ^X) Reboot System
    KERNEL reboot.c32
    TEXT HELP
    Restart the computer.
    ENDTEXT

LABEL poweroff
    MENU LABEL ^0) Power Off
    KERNEL poweroff.c32
    TEXT HELP
    Shut down the computer.
    ENDTEXT

EOF
    
    echo -e "${GREEN}OK${NC}"
}

# Function to create network tools submenu
create_network_tools_menu() {
    echo -n "Creating network tools menu... "
    
    cat > "$TFTP_ROOT/menus/network-tools.cfg" << EOF
# Network Tools Menu
DEFAULT menu.c32
PROMPT 0
TIMEOUT 300

MENU TITLE Network Tools and Diagnostics
MENU COLOR border       30;44   #40ffffff #a0000000 std
MENU COLOR title        1;36;44 #9033ccff #a0000000 std
MENU COLOR sel          7;37;40 #e0ffffff #20ffffff all
MENU COLOR unsel        37;44   #50ffffff #a0000000 std

LABEL back
    MENU LABEL ^B) Back to Main Menu
    MENU DEFAULT
    KERNEL menu.c32
    APPEND /pxelinux.cfg/default

LABEL menu-separator-1
    MENU LABEL
    MENU DISABLE

LABEL pxe-info
    MENU LABEL ^1) PXE Network Information
    KERNEL menu.c32
    APPEND /menus/pxe-info.cfg
    TEXT HELP
    Display PXE server network configuration and connectivity info.
    ENDTEXT

LABEL network-boot-test
    MENU LABEL ^2) Network Boot Test
    LOCALBOOT 0x80
    TEXT HELP
    Test network boot functionality by returning to local boot.
    ENDTEXT

EOF
    
    echo -e "${GREEN}OK${NC}"
}

# Function to create recovery tools submenu
create_recovery_tools_menu() {
    echo -n "Creating recovery tools menu... "
    
    cat > "$TFTP_ROOT/menus/recovery-tools.cfg" << EOF
# Recovery Tools Menu
DEFAULT menu.c32
PROMPT 0
TIMEOUT 300

MENU TITLE System Recovery and Rescue Tools
MENU COLOR border       30;44   #40ffffff #a0000000 std
MENU COLOR title        1;36;44 #9033ccff #a0000000 std
MENU COLOR sel          7;37;40 #e0ffffff #20ffffff all
MENU COLOR unsel        37;44   #50ffffff #a0000000 std

LABEL back
    MENU LABEL ^B) Back to Main Menu
    MENU DEFAULT
    KERNEL menu.c32
    APPEND /pxelinux.cfg/default

LABEL menu-separator-1
    MENU LABEL
    MENU DISABLE

LABEL disk-tools
    MENU LABEL ^1) Disk and Partition Tools
    KERNEL menu.c32
    APPEND /menus/disk-tools.cfg
    TEXT HELP
    Access disk partitioning and file system tools.
    ENDTEXT

LABEL rescue-mode
    MENU LABEL ^2) System Rescue Mode
    KERNEL menu.c32
    APPEND /menus/rescue-mode.cfg
    TEXT HELP
    Boot into system rescue environments.
    ENDTEXT

EOF
    
    echo -e "${GREEN}OK${NC}"
}

# Function to create utility tools submenu
create_utility_tools_menu() {
    echo -n "Creating utility tools menu... "
    
    cat > "$TFTP_ROOT/menus/utility-tools.cfg" << EOF
# Utility Tools Menu
DEFAULT menu.c32
PROMPT 0
TIMEOUT 300

MENU TITLE General Utilities and Diagnostic Tools
MENU COLOR border       30;44   #40ffffff #a0000000 std
MENU COLOR title        1;36;44 #9033ccff #a0000000 std
MENU COLOR sel          7;37;40 #e0ffffff #20ffffff all
MENU COLOR unsel        37;44   #50ffffff #a0000000 std

LABEL back
    MENU LABEL ^B) Back to Main Menu
    MENU DEFAULT
    KERNEL menu.c32
    APPEND /pxelinux.cfg/default

LABEL menu-separator-1
    MENU LABEL
    MENU DISABLE

LABEL hardware-info
    MENU LABEL ^1) Hardware Information (HDT)
    KERNEL hdt.c32
    TEXT HELP
    Display detailed hardware information about this system.
    ENDTEXT

LABEL memory-test
    MENU LABEL ^2) Memory Test (Memtest86+)
    KERNEL memtest86+
    TEXT HELP
    Run comprehensive memory diagnostic test.
    ENDTEXT

LABEL cpu-stress
    MENU LABEL ^3) CPU Stress Test
    KERNEL menu.c32
    APPEND /menus/cpu-stress.cfg
    TEXT HELP
    CPU stress testing and burn-in tools.
    ENDTEXT

EOF
    
    echo -e "${GREEN}OK${NC}"
}

# Function to create server information menu
create_server_info_menu() {
    echo -n "Creating server information menu... "
    
    cat > "$TFTP_ROOT/menus/server-info.cfg" << EOF
# Server Information Menu
DEFAULT menu.c32
PROMPT 0
TIMEOUT 300

MENU TITLE PXE Server Information and Services
MENU COLOR border       30;44   #40ffffff #a0000000 std
MENU COLOR title        1;36;44 #9033ccff #a0000000 std
MENU COLOR sel          7;37;40 #e0ffffff #20ffffff all
MENU COLOR unsel        37;44   #50ffffff #a0000000 std

MENU HEADER
    ╔═══════════════════════════════════════════════════════════╗
    ║                   PXE Server Information                   ║
    ║                                                           ║
    ║  Server IP:      $PXE_SERVER_IP                          ║
    ║  TFTP Service:   Port 69                                  ║
    ║  HTTP Service:   Port 80                                  ║
    ║  NFS Service:    Port 2049                                ║
    ║  DHCP Service:   Port 67 (if local DHCP)                 ║
    ║                                                           ║
    ║  Web Interface:  http://$PXE_SERVER_IP/                  ║
    ║  Health Check:   http://$PXE_SERVER_IP/health            ║
    ║                                                           ║
    ║  Generated:      $(date +'%Y-%m-%d %H:%M:%S')                      ║
    ║  Ubuntu:         24.04 LTS                                ║
    ╚═══════════════════════════════════════════════════════════╝

LABEL back
    MENU LABEL ^B) Back to Main Menu
    MENU DEFAULT
    KERNEL menu.c32
    APPEND /pxelinux.cfg/default

LABEL menu-separator-1
    MENU LABEL
    MENU DISABLE

LABEL web-interface
    MENU LABEL ^1) Access Web Interface
    LOCALBOOT 0x80
    TEXT HELP
    To access the web interface, boot to your local OS and open:
    http://$PXE_SERVER_IP/
    ENDTEXT

LABEL health-check
    MENU LABEL ^2) Server Health Information
    LOCALBOOT 0x80
    TEXT HELP
    To check server health, access:
    http://$PXE_SERVER_IP/health
    ENDTEXT

LABEL network-info
    MENU LABEL ^3) Network Configuration
    KERNEL menu.c32
    APPEND /menus/pxe-info.cfg
    TEXT HELP
    Display detailed network configuration information.
    ENDTEXT

EOF
    
    echo -e "${GREEN}OK${NC}"
}

# Function to create PXE info display
create_pxe_info_menu() {
    echo -n "Creating PXE information display... "
    
    cat > "$TFTP_ROOT/menus/pxe-info.cfg" << EOF
# PXE Information Display
DEFAULT menu.c32
PROMPT 0
TIMEOUT 300

MENU TITLE PXE Network Configuration Information
MENU COLOR border       30;44   #40ffffff #a0000000 std
MENU COLOR title        1;36;44 #9033ccff #a0000000 std
MENU COLOR sel          7;37;40 #e0ffffff #20ffffff all
MENU COLOR unsel        37;44   #50ffffff #a0000000 std

MENU HEADER
    ╔═══════════════════════════════════════════════════════════╗
    ║                  Network Configuration                     ║
    ║                                                           ║
    ║  PXE Server IP:     $PXE_SERVER_IP                       ║
    ║  Network:           $SUBNET/$NETMASK                     ║
    ║  Gateway:           $GATEWAY                              ║
    ║  Interface:         $NETWORK_INTERFACE                   ║
    ║                                                           ║
    ║  TFTP Root:         $TFTP_ROOT                           ║
    ║  NFS Root:          $NFS_ROOT                            ║
    ║  HTTP Root:         $HTTP_ROOT                           ║
    ║                                                           ║
    ║  Services Available:                                      ║
    ║  • TFTP (Boot files)         :69                         ║
    ║  • HTTP (Web interface)      :80                         ║
    ║  • NFS (Installation media)  :2049                       ║
    ║  • DHCP (Network config)     :67 (if local)              ║
    ╚═══════════════════════════════════════════════════════════╝

LABEL back
    MENU LABEL ^B) Back to Network Tools
    MENU DEFAULT
    KERNEL menu.c32
    APPEND /menus/network-tools.cfg

LABEL main-menu
    MENU LABEL ^M) Back to Main Menu
    KERNEL menu.c32
    APPEND /pxelinux.cfg/default

EOF
    
    echo -e "${GREEN}OK${NC}"
}

# Function to copy necessary boot utilities
copy_boot_utilities() {
    echo -e "${BLUE}Copying boot utilities...${NC}"
    
    # Copy syslinux utilities that should already be available
    local syslinux_files=(
        "menu.c32"
        "reboot.c32" 
        "poweroff.c32"
        "hdt.c32"
        "libcom32.c32"
        "libgpl.c32"
        "libmenu.c32"
        "libutil.c32"
        "vesamenu.c32"
    )
    
    echo "Copying syslinux utilities..."
    for file in "${syslinux_files[@]}"; do
        copy_boot_file "$file" \
            "$SYSLINUX_FILES_DIR/lib/syslinux/modules/bios/$file" \
            "/usr/lib/syslinux/modules/bios/$file" \
            "$TFTP_ROOT/$file" || \
        copy_boot_file "$file" \
            "$SYSLINUX_FILES_DIR/lib/syslinux/$file" \
            "/usr/lib/syslinux/$file" \
            "$TFTP_ROOT/$file" || true  # Don't fail if optional files are missing
    done
    
    # Copy memtest86+ if available
    echo "Copying memory test utilities..."
    if ! copy_boot_file "memtest86+x64.bin" \
        "$MEMTEST_FILES_DIR/memtest86+x64.bin" \
        "/usr/lib/memtest86+/memtest86+.bin" \
        "$TFTP_ROOT/memtest86+"; then
        copy_boot_file "memtest86+.bin" \
            "$MEMTEST_FILES_DIR/lib/memtest86+/memtest86+.bin" \
            "/boot/memtest86+.bin" \
            "$TFTP_ROOT/memtest86+" || echo -e "${YELLOW}  Install with: sudo apt install memtest86+${NC}"
    fi
    
    # Set proper permissions
    echo -n "Setting file permissions... "
    find "$TFTP_ROOT" -name "*.c32" -exec chmod 644 {} \;
    find "$TFTP_ROOT" -name "*.cfg" -exec chmod 644 {} \;
    chown -R tftp:tftp "$TFTP_ROOT"
    echo -e "${GREEN}OK${NC}"
}

# Function to create ISO placeholder entries
create_iso_placeholders() {
    echo -n "Creating ISO placeholder entries... "
    
    # Create a placeholder for ISO entries that will be managed by iso-manager script
    cat >> "$TFTP_ROOT/pxelinux.cfg/default" << EOF

# ISO entries will be automatically added here by iso-manager.sh
# Format example:
# LABEL ubuntu-24.04-server
#     MENU LABEL Ubuntu 24.04 Server
#     KERNEL /kernels/ubuntu-24.04/vmlinuz
#     APPEND initrd=/initrd/ubuntu-24.04/initrd.img ip=dhcp url=http://$PXE_SERVER_IP/iso/ubuntu-24.04/
#     TEXT HELP
#     Install Ubuntu 24.04 Server via network installation.
#     ENDTEXT

EOF
    
    echo -e "${GREEN}OK${NC}"
}

# Function to verify PXE menu configuration
verify_pxe_menu() {
    echo -e "${BLUE}Verifying PXE menu configuration...${NC}"
    
    # Check main menu file
    echo -n "Checking main menu configuration... "
    if [[ -f "$TFTP_ROOT/pxelinux.cfg/default" ]]; then
        echo -e "${GREEN}Present${NC}"
    else
        echo -e "${RED}Missing${NC}"
        echo "Error: Main PXE menu configuration not found"
        exit 1
    fi
    
    # Check submenu files
    echo -n "Checking submenu configurations... "
    local submenu_count=0
    for menu_file in "$TFTP_ROOT/menus"/*.cfg; do
        if [[ -f "$menu_file" ]]; then
            ((submenu_count++))
        fi
    done
    
    if [[ $submenu_count -gt 0 ]]; then
        echo -e "${GREEN}$submenu_count submenus${NC}"
    else
        echo -e "${YELLOW}No submenus found${NC}"
    fi
    
    # Check essential boot files
    echo -n "Checking essential boot files... "
    local missing_files=()
    local essential_files=("pxelinux.0" "menu.c32")
    
    for file in "${essential_files[@]}"; do
        if [[ ! -f "$TFTP_ROOT/$file" ]]; then
            missing_files+=("$file")
        fi
    done
    
    if [[ ${#missing_files[@]} -eq 0 ]]; then
        echo -e "${GREEN}All present${NC}"
    else
        echo -e "${RED}Missing: ${missing_files[*]}${NC}"
        echo "Error: Essential boot files missing"
        exit 1
    fi
    
    # Check TFTP service
    echo -n "Checking TFTP service... "
    if systemctl is-active tftpd-hpa >/dev/null 2>&1; then
        echo -e "${GREEN}Active${NC}"
    else
        echo -e "${RED}Inactive${NC}"
        echo "Warning: TFTP service not running"
    fi
}

# Function to restart TFTP service
restart_tftp_service() {
    echo -e "${BLUE}Restarting TFTP service...${NC}"
    
    echo -n "Restarting TFTP service... "
    if systemctl restart tftpd-hpa; then
        echo -e "${GREEN}OK${NC}"
    else
        echo -e "${RED}Failed${NC}"
        echo "Warning: Failed to restart TFTP service"
        echo "Check with: sudo systemctl status tftpd-hpa"
    fi
    
    # Verify service is running
    echo -n "Verifying TFTP service... "
    if systemctl is-active tftpd-hpa >/dev/null 2>&1; then
        echo -e "${GREEN}Active${NC}"
    else
        echo -e "${RED}Inactive${NC}"
        echo "Error: TFTP service failed to start"
        exit 1
    fi
}

# Function to show testing commands
show_testing_commands() {
    echo -e "${BLUE}PXE Menu Testing Commands:${NC}"
    echo
    echo "1. Test TFTP access to menu files:"
    echo "   tftp $PXE_SERVER_IP -c get pxelinux.cfg/default"
    echo "   tftp $PXE_SERVER_IP -c get menu.c32"
    echo
    echo "2. Check menu file syntax:"
    echo "   cat $TFTP_ROOT/pxelinux.cfg/default"
    echo "   find $TFTP_ROOT/menus -name '*.cfg' -exec echo 'File: {}' \\; -exec head -5 {} \\;"
    echo
    echo "3. Test PXE boot:"
    echo "   - Configure a VM or physical machine for network boot"
    echo "   - Ensure client is on the same network (10.1.1.0/24)"
    echo "   - Boot from network and verify menu appears"
    echo
    echo "4. Monitor TFTP requests:"
    echo "   sudo journalctl -u tftpd-hpa -f"
    echo "   sudo tcpdump -i $NETWORK_INTERFACE port 69"
    echo
}

# Function to show configuration summary
show_summary() {
    echo
    echo -e "${GREEN}=== PXE Menu Configuration Summary ===${NC}"
    echo "TFTP Root: $TFTP_ROOT"
    echo "PXE Server: $PXE_SERVER_IP"
    echo "Menu Timeout: ${PXELINUX_TIMEOUT} seconds"
    echo "Default Action: Boot from local disk"
    echo
    echo "Menu Structure:"
    echo "  Main Menu: $TFTP_ROOT/pxelinux.cfg/default"
    echo "  Submenus: $TFTP_ROOT/menus/"
    echo "    ├── network-tools.cfg"
    echo "    ├── recovery-tools.cfg"
    echo "    ├── utility-tools.cfg"
    echo "    ├── server-info.cfg"
    echo "    └── pxe-info.cfg"
    echo
    echo "Boot Options Available:"
    echo "  • Boot from local disk (default)"
    echo "  • Memory test (if memtest86+ installed)"
    echo "  • Hardware information (HDT)"
    echo "  • Network tools and diagnostics"
    echo "  • Recovery and rescue tools"
    echo "  • Server information"
    echo "  • System reboot/poweroff"
    echo
    echo "ISO Integration:"
    echo "  ISOs will be automatically added by: sudo ./08-iso-manager.sh add <iso>"
    echo
    echo "Web Interface:"
    echo "  http://$PXE_SERVER_IP/ - Main server interface"
    echo "  http://$PXE_SERVER_IP/status - Server status"
    echo
    echo "Next steps:"
    echo "1. Add ISO files: sudo ./08-iso-manager.sh add <iso-file>"
    echo "2. Test PXE boot with a client machine"
    echo "3. Monitor logs: sudo journalctl -u tftpd-hpa -f"
    echo
}

# Main execution
main() {
    echo "Starting PXE boot menu configuration..."
    echo "Date: $(date)"
    echo "User: $(whoami)"
    echo "Host: $(hostname)"
    echo

    check_root
    backup_pxe_config
    create_pxe_menu_structure
    create_main_pxe_menu
    create_network_tools_menu
    create_recovery_tools_menu
    create_utility_tools_menu
    create_server_info_menu
    create_pxe_info_menu
    copy_boot_utilities
    create_iso_placeholders
    verify_pxe_menu
    restart_tftp_service
    
    show_summary
    show_testing_commands
}

# Run main function
main "$@"
